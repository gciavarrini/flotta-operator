// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Flotta Edge Management",
    "title": "FlottaManagement",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "basePath": "/api/flotta-management/v1",
  "paths": {
    "/control/{device_id}/in": {
      "get": {
        "tags": [
          "yggdrasil"
        ],
        "operationId": "GetControlMessageForDevice",
        "parameters": [
          {
            "type": "string",
            "description": "Device ID",
            "name": "device_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/message"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Error"
          },
          "500": {
            "description": "Error"
          }
        }
      }
    },
    "/control/{device_id}/out": {
      "post": {
        "tags": [
          "yggdrasil"
        ],
        "operationId": "PostControlMessageForDevice",
        "parameters": [
          {
            "type": "string",
            "description": "Device ID",
            "name": "device_id",
            "in": "path",
            "required": true
          },
          {
            "name": "message",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/message"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Error"
          },
          "500": {
            "description": "Error"
          }
        }
      }
    },
    "/data/{device_id}/in": {
      "get": {
        "tags": [
          "yggdrasil"
        ],
        "operationId": "GetDataMessageForDevice",
        "parameters": [
          {
            "type": "string",
            "description": "Device ID",
            "name": "device_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/message"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Error"
          },
          "500": {
            "description": "Error"
          }
        }
      }
    },
    "/data/{device_id}/out": {
      "post": {
        "tags": [
          "yggdrasil"
        ],
        "operationId": "PostDataMessageForDevice",
        "parameters": [
          {
            "type": "string",
            "description": "Device ID",
            "name": "device_id",
            "in": "path",
            "required": true
          },
          {
            "name": "message",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/message"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/message-response"
            }
          },
          "400": {
            "description": "Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Error"
          },
          "500": {
            "description": "Error"
          }
        }
      }
    }
  },
  "definitions": {
    "boot": {
      "type": "object",
      "properties": {
        "current_boot_mode": {
          "type": "string"
        },
        "pxe_interface": {
          "type": "string"
        }
      }
    },
    "configmap-list": {
      "type": "array",
      "items": {
        "description": "ConfigMap kubernetes yaml specification",
        "type": "string"
      }
    },
    "container-metrics": {
      "type": "object",
      "properties": {
        "disabled": {
          "type": "boolean"
        },
        "path": {
          "description": "Path to use when retrieving metrics",
          "type": "string"
        },
        "port": {
          "description": "Port to use when retrieve the metrics",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "cpu": {
      "type": "object",
      "properties": {
        "architecture": {
          "type": "string"
        },
        "count": {
          "type": "integer"
        },
        "flags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "frequency": {
          "type": "number"
        },
        "model_name": {
          "type": "string"
        }
      }
    },
    "data-configuration": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/data-path"
          }
        }
      }
    },
    "data-path": {
      "description": "Device-to-control plane paths mapping",
      "type": "object",
      "properties": {
        "source": {
          "description": "Path in the workload container",
          "type": "string"
        },
        "target": {
          "description": "Path in the control plane storage",
          "type": "string"
        }
      }
    },
    "device-configuration": {
      "type": "object",
      "properties": {
        "heartbeat": {
          "$ref": "#/definitions/heartbeat-configuration"
        },
        "metrics": {
          "$ref": "#/definitions/metrics-configuration"
        },
        "os": {
          "description": "OS lifecycle information",
          "$ref": "#/definitions/os-information"
        },
        "storage": {
          "$ref": "#/definitions/storage-configuration"
        }
      }
    },
    "device-configuration-message": {
      "type": "object",
      "properties": {
        "ansible_playbook": {
          "type": "string"
        },
        "configuration": {
          "$ref": "#/definitions/device-configuration"
        },
        "device_id": {
          "description": "Device identifier",
          "type": "string"
        },
        "secrets": {
          "description": "List of secrets used by the workloads",
          "$ref": "#/definitions/secret-list"
        },
        "version": {
          "type": "string"
        },
        "workloads": {
          "description": "List of workloads deployed to the device",
          "$ref": "#/definitions/workload-list"
        },
        "workloads_monitoring_interval": {
          "description": "Defines the interval in seconds between the attempts to evaluate the workloads status and restart those that failed",
          "type": "integer",
          "exclusiveMinimum": true
        }
      }
    },
    "disk": {
      "type": "object",
      "properties": {
        "bootable": {
          "type": "boolean"
        },
        "by_id": {
          "description": "by-id is the World Wide Number of the device which guaranteed to be unique for every storage device",
          "type": "string"
        },
        "by_path": {
          "description": "by-path is the shortest physical path to the device",
          "type": "string"
        },
        "drive_type": {
          "type": "string"
        },
        "hctl": {
          "type": "string"
        },
        "id": {
          "description": "Determine the disk's unique identifier which is the by-id field if it exists and fallback to the by-path field otherwise",
          "type": "string"
        },
        "io_perf": {
          "$ref": "#/definitions/io_perf"
        },
        "is_installation_media": {
          "description": "Whether the disk appears to be an installation media or not",
          "type": "boolean"
        },
        "model": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "serial": {
          "type": "string"
        },
        "size_bytes": {
          "type": "integer"
        },
        "smart": {
          "type": "string"
        },
        "vendor": {
          "type": "string"
        },
        "wwn": {
          "type": "string"
        }
      }
    },
    "event-info": {
      "type": "object",
      "properties": {
        "message": {
          "description": "Message describe the event which has occured.",
          "type": "string"
        },
        "reason": {
          "description": "Reason is single word description of the subject of the event.",
          "type": "string"
        },
        "type": {
          "description": "Either 'info' or 'warn', which reflect the importance of event.",
          "type": "string",
          "enum": [
            "info",
            "warn"
          ]
        }
      }
    },
    "gpu": {
      "type": "object",
      "properties": {
        "address": {
          "description": "Device address (for example \"0000:00:02.0\")",
          "type": "string"
        },
        "device_id": {
          "description": "ID of the device (for example \"3ea0\")",
          "type": "string"
        },
        "name": {
          "description": "Product name of the device (for example \"UHD Graphics 620 (Whiskey Lake)\")",
          "type": "string"
        },
        "vendor": {
          "description": "The name of the device vendor (for example \"Intel Corporation\")",
          "type": "string"
        },
        "vendor_id": {
          "description": "ID of the vendor (for example \"8086\")",
          "type": "string"
        }
      }
    },
    "hardware-info": {
      "type": "object",
      "properties": {
        "boot": {
          "$ref": "#/definitions/boot"
        },
        "cpu": {
          "$ref": "#/definitions/cpu"
        },
        "disks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/disk"
          }
        },
        "gpus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/gpu"
          }
        },
        "hostname": {
          "type": "string"
        },
        "interfaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/interface"
          }
        },
        "memory": {
          "$ref": "#/definitions/memory"
        },
        "system_vendor": {
          "$ref": "#/definitions/system_vendor"
        }
      }
    },
    "hardware-profile-configuration": {
      "type": "object",
      "properties": {
        "include": {
          "type": "boolean"
        },
        "scope": {
          "type": "string",
          "enum": [
            "full",
            "delta"
          ]
        }
      }
    },
    "heartbeat": {
      "type": "object",
      "properties": {
        "events": {
          "description": "Events produced by device worker.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/event-info"
          }
        },
        "hardware": {
          "description": "Hardware information",
          "$ref": "#/definitions/hardware-info"
        },
        "status": {
          "type": "string",
          "enum": [
            "up",
            "degraded"
          ]
        },
        "time": {
          "type": "string",
          "format": "date-time"
        },
        "upgrade": {
          "description": "Upgrade status",
          "$ref": "#/definitions/upgrade-status"
        },
        "version": {
          "type": "string"
        },
        "workloads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/workload-status"
          }
        }
      }
    },
    "heartbeat-configuration": {
      "type": "object",
      "properties": {
        "hardware_profile": {
          "$ref": "#/definitions/hardware-profile-configuration"
        },
        "period_seconds": {
          "type": "integer"
        }
      }
    },
    "image-registries": {
      "type": "object",
      "properties": {
        "authFile": {
          "description": "Image registries authfile created by executing ` + "`" + `podman login` + "`" + ` or ` + "`" + `docker login` + "`" + ` (i.e. ~/.docker/config.json). https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/#log-in-to-docker-hub describes how the file can be created and how it is structured.",
          "type": "string"
        }
      }
    },
    "interface": {
      "type": "object",
      "properties": {
        "biosdevname": {
          "type": "string"
        },
        "client_id": {
          "type": "string"
        },
        "flags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "has_carrier": {
          "type": "boolean"
        },
        "ipv4_addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ipv6_addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mac_address": {
          "type": "string"
        },
        "mtu": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "product": {
          "type": "string"
        },
        "speed_mbps": {
          "type": "integer"
        },
        "vendor": {
          "type": "string"
        }
      }
    },
    "io_perf": {
      "type": "object",
      "properties": {
        "sync_duration": {
          "description": "99th percentile of fsync duration in milliseconds",
          "type": "integer"
        }
      }
    },
    "memory": {
      "type": "object",
      "properties": {
        "physical_bytes": {
          "type": "integer"
        },
        "usable_bytes": {
          "type": "integer"
        }
      }
    },
    "message": {
      "type": "object",
      "properties": {
        "content": {
          "description": "Content"
        },
        "directive": {
          "type": "string"
        },
        "message_id": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "response_to": {
          "type": "string"
        },
        "sent": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string",
          "enum": [
            "connection-status",
            "command",
            "event",
            "data"
          ]
        },
        "version": {
          "type": "integer"
        }
      }
    },
    "message-response": {
      "type": "object",
      "properties": {
        "content": {
          "description": "Content"
        },
        "directive": {
          "type": "string"
        },
        "message_id": {
          "type": "string"
        }
      }
    },
    "metrics": {
      "type": "object",
      "properties": {
        "allow_list": {
          "description": "Specification of system metrics to be collected",
          "$ref": "#/definitions/metrics-allow-list"
        },
        "containers": {
          "type": "object",
          "additionalProperties": {
            "description": "Metrics container configuration",
            "$ref": "#/definitions/container-metrics"
          }
        },
        "interval": {
          "description": "Interval(in seconds) to scrape metrics endpoint.",
          "type": "integer",
          "format": "int32"
        },
        "path": {
          "description": "Path to use when retrieving metrics",
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "metrics-allow-list": {
      "description": "Specification of metrics to be collected",
      "type": "object",
      "properties": {
        "names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "metrics-configuration": {
      "description": "Defines metrics configuration for the device",
      "type": "object",
      "properties": {
        "retention": {
          "description": "Defines metrics data retention limits",
          "$ref": "#/definitions/metrics-retention"
        },
        "system": {
          "description": "System metrics gathering configuration",
          "$ref": "#/definitions/system-metrics-configuration"
        }
      }
    },
    "metrics-retention": {
      "type": "object",
      "properties": {
        "max_hours": {
          "description": "Maximum time in hours metrics data files should kept on the device",
          "type": "integer",
          "format": "int32"
        },
        "max_mib": {
          "description": "Maximum size of metrics stored on disk",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "os-information": {
      "type": "object",
      "properties": {
        "automatically_upgrade": {
          "description": "automatically upgrade the OS image",
          "type": "boolean"
        },
        "commit_id": {
          "description": "the last commit ID",
          "type": "string"
        },
        "hosted_objects_url": {
          "description": "the URL of the hosted commits web server",
          "type": "string"
        }
      }
    },
    "registration-info": {
      "type": "object",
      "properties": {
        "certificate_request": {
          "description": "Certificate Signing Request to be signed by flotta-operator CA",
          "type": "string"
        },
        "hardware": {
          "description": "Hardware information",
          "$ref": "#/definitions/hardware-info"
        }
      }
    },
    "registration-response": {
      "type": "object",
      "properties": {
        "certificate": {
          "description": "Client certificate to be used in future operations",
          "type": "string"
        }
      }
    },
    "s3-storage-configuration": {
      "type": "object",
      "properties": {
        "aws_access_key_id": {
          "type": "string"
        },
        "aws_ca_bundle": {
          "type": "string"
        },
        "aws_secret_access_key": {
          "type": "string"
        },
        "bucket_host": {
          "type": "string"
        },
        "bucket_name": {
          "type": "string"
        },
        "bucket_port": {
          "type": "integer",
          "format": "int32"
        },
        "bucket_region": {
          "type": "string"
        }
      }
    },
    "secret": {
      "type": "object",
      "properties": {
        "data": {
          "description": "The secret's data section in JSON format",
          "type": "string"
        },
        "name": {
          "description": "Name of the secret",
          "type": "string"
        }
      }
    },
    "secret-list": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/secret"
      }
    },
    "storage-configuration": {
      "type": "object",
      "properties": {
        "s3": {
          "$ref": "#/definitions/s3-storage-configuration"
        }
      }
    },
    "system-metrics-configuration": {
      "type": "object",
      "properties": {
        "allow_list": {
          "description": "Specification of system metrics to be collected",
          "$ref": "#/definitions/metrics-allow-list"
        },
        "disabled": {
          "description": "When true, turns system metrics collection off. False by default.",
          "type": "boolean"
        },
        "interval": {
          "description": "Interval(in seconds) to scrape metrics endpoint.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "system_vendor": {
      "type": "object",
      "properties": {
        "manufacturer": {
          "type": "string"
        },
        "product_name": {
          "type": "string"
        },
        "serial_number": {
          "type": "string"
        },
        "virtual": {
          "description": "Whether the machine appears to be a virtual machine or not",
          "type": "boolean"
        }
      }
    },
    "upgrade-status": {
      "type": "object",
      "properties": {
        "current_commit_ID": {
          "type": "string"
        },
        "last_upgrade_status": {
          "type": "string",
          "enum": [
            "succeeded",
            "failed"
          ]
        },
        "last_upgrade_time": {
          "type": "string"
        }
      }
    },
    "workload": {
      "type": "object",
      "properties": {
        "configmaps": {
          "description": "List of configmaps used by the workload",
          "$ref": "#/definitions/configmap-list"
        },
        "data": {
          "description": "Configuration for data transfer",
          "$ref": "#/definitions/data-configuration"
        },
        "imageRegistries": {
          "description": "Image registries configuration",
          "$ref": "#/definitions/image-registries"
        },
        "metrics": {
          "description": "Metrics endpoint configuration",
          "$ref": "#/definitions/metrics"
        },
        "name": {
          "description": "Name of the workload",
          "type": "string"
        },
        "specification": {
          "type": "string"
        }
      }
    },
    "workload-list": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/workload"
      }
    },
    "workload-status": {
      "type": "object",
      "properties": {
        "last_data_upload": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "deploying",
            "running",
            "crashed",
            "stopped"
          ]
        }
      }
    }
  },
  "securityDefinitions": {
    "agentAuth": {
      "type": "apiKey",
      "name": "X-Secret-Key",
      "in": "header"
    }
  },
  "tags": [
    {
      "description": "Device management",
      "name": "devices"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Flotta Edge Management",
    "title": "FlottaManagement",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "basePath": "/api/flotta-management/v1",
  "paths": {
    "/control/{device_id}/in": {
      "get": {
        "tags": [
          "yggdrasil"
        ],
        "operationId": "GetControlMessageForDevice",
        "parameters": [
          {
            "type": "string",
            "description": "Device ID",
            "name": "device_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/message"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Error"
          },
          "500": {
            "description": "Error"
          }
        }
      }
    },
    "/control/{device_id}/out": {
      "post": {
        "tags": [
          "yggdrasil"
        ],
        "operationId": "PostControlMessageForDevice",
        "parameters": [
          {
            "type": "string",
            "description": "Device ID",
            "name": "device_id",
            "in": "path",
            "required": true
          },
          {
            "name": "message",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/message"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Error"
          },
          "500": {
            "description": "Error"
          }
        }
      }
    },
    "/data/{device_id}/in": {
      "get": {
        "tags": [
          "yggdrasil"
        ],
        "operationId": "GetDataMessageForDevice",
        "parameters": [
          {
            "type": "string",
            "description": "Device ID",
            "name": "device_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/message"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Error"
          },
          "500": {
            "description": "Error"
          }
        }
      }
    },
    "/data/{device_id}/out": {
      "post": {
        "tags": [
          "yggdrasil"
        ],
        "operationId": "PostDataMessageForDevice",
        "parameters": [
          {
            "type": "string",
            "description": "Device ID",
            "name": "device_id",
            "in": "path",
            "required": true
          },
          {
            "name": "message",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/message"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/message-response"
            }
          },
          "400": {
            "description": "Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Error"
          },
          "500": {
            "description": "Error"
          }
        }
      }
    }
  },
  "definitions": {
    "boot": {
      "type": "object",
      "properties": {
        "current_boot_mode": {
          "type": "string"
        },
        "pxe_interface": {
          "type": "string"
        }
      }
    },
    "configmap-list": {
      "type": "array",
      "items": {
        "description": "ConfigMap kubernetes yaml specification",
        "type": "string"
      }
    },
    "container-metrics": {
      "type": "object",
      "properties": {
        "disabled": {
          "type": "boolean"
        },
        "path": {
          "description": "Path to use when retrieving metrics",
          "type": "string"
        },
        "port": {
          "description": "Port to use when retrieve the metrics",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "cpu": {
      "type": "object",
      "properties": {
        "architecture": {
          "type": "string"
        },
        "count": {
          "type": "integer"
        },
        "flags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "frequency": {
          "type": "number"
        },
        "model_name": {
          "type": "string"
        }
      }
    },
    "data-configuration": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/data-path"
          }
        }
      }
    },
    "data-path": {
      "description": "Device-to-control plane paths mapping",
      "type": "object",
      "properties": {
        "source": {
          "description": "Path in the workload container",
          "type": "string"
        },
        "target": {
          "description": "Path in the control plane storage",
          "type": "string"
        }
      }
    },
    "device-configuration": {
      "type": "object",
      "properties": {
        "heartbeat": {
          "$ref": "#/definitions/heartbeat-configuration"
        },
        "metrics": {
          "$ref": "#/definitions/metrics-configuration"
        },
        "os": {
          "description": "OS lifecycle information",
          "$ref": "#/definitions/os-information"
        },
        "storage": {
          "$ref": "#/definitions/storage-configuration"
        }
      }
    },
    "device-configuration-message": {
      "type": "object",
      "properties": {
        "ansible_playbook": {
          "type": "string"
        },
        "configuration": {
          "$ref": "#/definitions/device-configuration"
        },
        "device_id": {
          "description": "Device identifier",
          "type": "string"
        },
        "secrets": {
          "description": "List of secrets used by the workloads",
          "$ref": "#/definitions/secret-list"
        },
        "version": {
          "type": "string"
        },
        "workloads": {
          "description": "List of workloads deployed to the device",
          "$ref": "#/definitions/workload-list"
        },
        "workloads_monitoring_interval": {
          "description": "Defines the interval in seconds between the attempts to evaluate the workloads status and restart those that failed",
          "type": "integer",
          "minimum": 0,
          "exclusiveMinimum": true
        }
      }
    },
    "disk": {
      "type": "object",
      "properties": {
        "bootable": {
          "type": "boolean"
        },
        "by_id": {
          "description": "by-id is the World Wide Number of the device which guaranteed to be unique for every storage device",
          "type": "string"
        },
        "by_path": {
          "description": "by-path is the shortest physical path to the device",
          "type": "string"
        },
        "drive_type": {
          "type": "string"
        },
        "hctl": {
          "type": "string"
        },
        "id": {
          "description": "Determine the disk's unique identifier which is the by-id field if it exists and fallback to the by-path field otherwise",
          "type": "string"
        },
        "io_perf": {
          "$ref": "#/definitions/io_perf"
        },
        "is_installation_media": {
          "description": "Whether the disk appears to be an installation media or not",
          "type": "boolean"
        },
        "model": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "serial": {
          "type": "string"
        },
        "size_bytes": {
          "type": "integer"
        },
        "smart": {
          "type": "string"
        },
        "vendor": {
          "type": "string"
        },
        "wwn": {
          "type": "string"
        }
      }
    },
    "event-info": {
      "type": "object",
      "properties": {
        "message": {
          "description": "Message describe the event which has occured.",
          "type": "string"
        },
        "reason": {
          "description": "Reason is single word description of the subject of the event.",
          "type": "string"
        },
        "type": {
          "description": "Either 'info' or 'warn', which reflect the importance of event.",
          "type": "string",
          "enum": [
            "info",
            "warn"
          ]
        }
      }
    },
    "gpu": {
      "type": "object",
      "properties": {
        "address": {
          "description": "Device address (for example \"0000:00:02.0\")",
          "type": "string"
        },
        "device_id": {
          "description": "ID of the device (for example \"3ea0\")",
          "type": "string"
        },
        "name": {
          "description": "Product name of the device (for example \"UHD Graphics 620 (Whiskey Lake)\")",
          "type": "string"
        },
        "vendor": {
          "description": "The name of the device vendor (for example \"Intel Corporation\")",
          "type": "string"
        },
        "vendor_id": {
          "description": "ID of the vendor (for example \"8086\")",
          "type": "string"
        }
      }
    },
    "hardware-info": {
      "type": "object",
      "properties": {
        "boot": {
          "$ref": "#/definitions/boot"
        },
        "cpu": {
          "$ref": "#/definitions/cpu"
        },
        "disks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/disk"
          }
        },
        "gpus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/gpu"
          }
        },
        "hostname": {
          "type": "string"
        },
        "interfaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/interface"
          }
        },
        "memory": {
          "$ref": "#/definitions/memory"
        },
        "system_vendor": {
          "$ref": "#/definitions/system_vendor"
        }
      }
    },
    "hardware-profile-configuration": {
      "type": "object",
      "properties": {
        "include": {
          "type": "boolean"
        },
        "scope": {
          "type": "string",
          "enum": [
            "full",
            "delta"
          ]
        }
      }
    },
    "heartbeat": {
      "type": "object",
      "properties": {
        "events": {
          "description": "Events produced by device worker.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/event-info"
          }
        },
        "hardware": {
          "description": "Hardware information",
          "$ref": "#/definitions/hardware-info"
        },
        "status": {
          "type": "string",
          "enum": [
            "up",
            "degraded"
          ]
        },
        "time": {
          "type": "string",
          "format": "date-time"
        },
        "upgrade": {
          "description": "Upgrade status",
          "$ref": "#/definitions/upgrade-status"
        },
        "version": {
          "type": "string"
        },
        "workloads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/workload-status"
          }
        }
      }
    },
    "heartbeat-configuration": {
      "type": "object",
      "properties": {
        "hardware_profile": {
          "$ref": "#/definitions/hardware-profile-configuration"
        },
        "period_seconds": {
          "type": "integer"
        }
      }
    },
    "image-registries": {
      "type": "object",
      "properties": {
        "authFile": {
          "description": "Image registries authfile created by executing ` + "`" + `podman login` + "`" + ` or ` + "`" + `docker login` + "`" + ` (i.e. ~/.docker/config.json). https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/#log-in-to-docker-hub describes how the file can be created and how it is structured.",
          "type": "string"
        }
      }
    },
    "interface": {
      "type": "object",
      "properties": {
        "biosdevname": {
          "type": "string"
        },
        "client_id": {
          "type": "string"
        },
        "flags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "has_carrier": {
          "type": "boolean"
        },
        "ipv4_addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ipv6_addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mac_address": {
          "type": "string"
        },
        "mtu": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "product": {
          "type": "string"
        },
        "speed_mbps": {
          "type": "integer"
        },
        "vendor": {
          "type": "string"
        }
      }
    },
    "io_perf": {
      "type": "object",
      "properties": {
        "sync_duration": {
          "description": "99th percentile of fsync duration in milliseconds",
          "type": "integer"
        }
      }
    },
    "memory": {
      "type": "object",
      "properties": {
        "physical_bytes": {
          "type": "integer"
        },
        "usable_bytes": {
          "type": "integer"
        }
      }
    },
    "message": {
      "type": "object",
      "properties": {
        "content": {
          "description": "Content"
        },
        "directive": {
          "type": "string"
        },
        "message_id": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "response_to": {
          "type": "string"
        },
        "sent": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string",
          "enum": [
            "connection-status",
            "command",
            "event",
            "data"
          ]
        },
        "version": {
          "type": "integer"
        }
      }
    },
    "message-response": {
      "type": "object",
      "properties": {
        "content": {
          "description": "Content"
        },
        "directive": {
          "type": "string"
        },
        "message_id": {
          "type": "string"
        }
      }
    },
    "metrics": {
      "type": "object",
      "properties": {
        "allow_list": {
          "description": "Specification of system metrics to be collected",
          "$ref": "#/definitions/metrics-allow-list"
        },
        "containers": {
          "type": "object",
          "additionalProperties": {
            "description": "Metrics container configuration",
            "$ref": "#/definitions/container-metrics"
          }
        },
        "interval": {
          "description": "Interval(in seconds) to scrape metrics endpoint.",
          "type": "integer",
          "format": "int32"
        },
        "path": {
          "description": "Path to use when retrieving metrics",
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "metrics-allow-list": {
      "description": "Specification of metrics to be collected",
      "type": "object",
      "properties": {
        "names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "metrics-configuration": {
      "description": "Defines metrics configuration for the device",
      "type": "object",
      "properties": {
        "retention": {
          "description": "Defines metrics data retention limits",
          "$ref": "#/definitions/metrics-retention"
        },
        "system": {
          "description": "System metrics gathering configuration",
          "$ref": "#/definitions/system-metrics-configuration"
        }
      }
    },
    "metrics-retention": {
      "type": "object",
      "properties": {
        "max_hours": {
          "description": "Maximum time in hours metrics data files should kept on the device",
          "type": "integer",
          "format": "int32"
        },
        "max_mib": {
          "description": "Maximum size of metrics stored on disk",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "os-information": {
      "type": "object",
      "properties": {
        "automatically_upgrade": {
          "description": "automatically upgrade the OS image",
          "type": "boolean"
        },
        "commit_id": {
          "description": "the last commit ID",
          "type": "string"
        },
        "hosted_objects_url": {
          "description": "the URL of the hosted commits web server",
          "type": "string"
        }
      }
    },
    "registration-info": {
      "type": "object",
      "properties": {
        "certificate_request": {
          "description": "Certificate Signing Request to be signed by flotta-operator CA",
          "type": "string"
        },
        "hardware": {
          "description": "Hardware information",
          "$ref": "#/definitions/hardware-info"
        }
      }
    },
    "registration-response": {
      "type": "object",
      "properties": {
        "certificate": {
          "description": "Client certificate to be used in future operations",
          "type": "string"
        }
      }
    },
    "s3-storage-configuration": {
      "type": "object",
      "properties": {
        "aws_access_key_id": {
          "type": "string"
        },
        "aws_ca_bundle": {
          "type": "string"
        },
        "aws_secret_access_key": {
          "type": "string"
        },
        "bucket_host": {
          "type": "string"
        },
        "bucket_name": {
          "type": "string"
        },
        "bucket_port": {
          "type": "integer",
          "format": "int32"
        },
        "bucket_region": {
          "type": "string"
        }
      }
    },
    "secret": {
      "type": "object",
      "properties": {
        "data": {
          "description": "The secret's data section in JSON format",
          "type": "string"
        },
        "name": {
          "description": "Name of the secret",
          "type": "string"
        }
      }
    },
    "secret-list": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/secret"
      }
    },
    "storage-configuration": {
      "type": "object",
      "properties": {
        "s3": {
          "$ref": "#/definitions/s3-storage-configuration"
        }
      }
    },
    "system-metrics-configuration": {
      "type": "object",
      "properties": {
        "allow_list": {
          "description": "Specification of system metrics to be collected",
          "$ref": "#/definitions/metrics-allow-list"
        },
        "disabled": {
          "description": "When true, turns system metrics collection off. False by default.",
          "type": "boolean"
        },
        "interval": {
          "description": "Interval(in seconds) to scrape metrics endpoint.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "system_vendor": {
      "type": "object",
      "properties": {
        "manufacturer": {
          "type": "string"
        },
        "product_name": {
          "type": "string"
        },
        "serial_number": {
          "type": "string"
        },
        "virtual": {
          "description": "Whether the machine appears to be a virtual machine or not",
          "type": "boolean"
        }
      }
    },
    "upgrade-status": {
      "type": "object",
      "properties": {
        "current_commit_ID": {
          "type": "string"
        },
        "last_upgrade_status": {
          "type": "string",
          "enum": [
            "succeeded",
            "failed"
          ]
        },
        "last_upgrade_time": {
          "type": "string"
        }
      }
    },
    "workload": {
      "type": "object",
      "properties": {
        "configmaps": {
          "description": "List of configmaps used by the workload",
          "$ref": "#/definitions/configmap-list"
        },
        "data": {
          "description": "Configuration for data transfer",
          "$ref": "#/definitions/data-configuration"
        },
        "imageRegistries": {
          "description": "Image registries configuration",
          "$ref": "#/definitions/image-registries"
        },
        "metrics": {
          "description": "Metrics endpoint configuration",
          "$ref": "#/definitions/metrics"
        },
        "name": {
          "description": "Name of the workload",
          "type": "string"
        },
        "specification": {
          "type": "string"
        }
      }
    },
    "workload-list": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/workload"
      }
    },
    "workload-status": {
      "type": "object",
      "properties": {
        "last_data_upload": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "deploying",
            "running",
            "crashed",
            "stopped"
          ]
        }
      }
    }
  },
  "securityDefinitions": {
    "agentAuth": {
      "type": "apiKey",
      "name": "X-Secret-Key",
      "in": "header"
    }
  },
  "tags": [
    {
      "description": "Device management",
      "name": "devices"
    }
  ]
}`))
}
